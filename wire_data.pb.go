// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wire_data.proto

package l2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WireData struct {
	Eth    []byte `protobuf:"bytes,1,opt,name=Eth" json:"Eth"`
	Serial uint64 `protobuf:"varint,2,req,name=Serial" json:"Serial"`
}

func (m *WireData) Reset()         { *m = WireData{} }
func (m *WireData) String() string { return proto.CompactTextString(m) }
func (*WireData) ProtoMessage()    {}
func (*WireData) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd9a994a62fb525b, []int{0}
}
func (m *WireData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WireData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WireData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WireData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WireData.Merge(m, src)
}
func (m *WireData) XXX_Size() int {
	return m.Size()
}
func (m *WireData) XXX_DiscardUnknown() {
	xxx_messageInfo_WireData.DiscardUnknown(m)
}

var xxx_messageInfo_WireData proto.InternalMessageInfo

func (m *WireData) GetEth() []byte {
	if m != nil {
		return m.Eth
	}
	return nil
}

func (m *WireData) GetSerial() uint64 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func init() {
	proto.RegisterType((*WireData)(nil), "l2.WireData")
}

func init() { proto.RegisterFile("wire_data.proto", fileDescriptor_bd9a994a62fb525b) }

var fileDescriptor_bd9a994a62fb525b = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xcf, 0x2c, 0x4a,
	0x8d, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xca, 0x31, 0x92,
	0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf,
	0xd7, 0x07, 0x4b, 0x25, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xa2, 0xe4, 0xc0,
	0xc5, 0x11, 0x9e, 0x59, 0x94, 0xea, 0x92, 0x58, 0x92, 0x28, 0x24, 0xc6, 0xc5, 0xec, 0x5a, 0x92,
	0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe3, 0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x48, 0x40,
	0x48, 0x86, 0x8b, 0x2d, 0x38, 0xb5, 0x28, 0x33, 0x31, 0x47, 0x82, 0x49, 0x81, 0x49, 0x83, 0x05,
	0x2a, 0x05, 0x15, 0x73, 0x92, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x06, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x20, 0xe5, 0x33, 0xa0, 0x00, 0x00, 0x00,
}

func (m *WireData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WireData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Eth != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWireData(dAtA, i, uint64(len(m.Eth)))
		i += copy(dAtA[i:], m.Eth)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintWireData(dAtA, i, uint64(m.Serial))
	return i, nil
}

func encodeVarintWireData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WireData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eth != nil {
		l = len(m.Eth)
		n += 1 + l + sovWireData(uint64(l))
	}
	n += 1 + sovWireData(uint64(m.Serial))
	return n
}

func sovWireData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWireData(x uint64) (n int) {
	return sovWireData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WireData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWireData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WireData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WireData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWireData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWireData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWireData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eth = append(m.Eth[:0], dAtA[iNdEx:postIndex]...)
			if m.Eth == nil {
				m.Eth = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWireData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serial |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipWireData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWireData
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWireData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Serial")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWireData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWireData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWireData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWireData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWireData
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWireData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWireData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWireData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWireData
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWireData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWireData   = fmt.Errorf("proto: integer overflow")
)
